#!/usr/bin/python

import platform, os, sys, getpass, shutil

try: 
    from GSMT import *
except Exception as e:
    print "Can\'t load main library!"
    print "ERROR: " + str(e)
    sys.exit()
libMain = GSMT.main()

MainPath = "/etc/GSMT"


############################ functions ############################


def exit():
    shutil.rmtree(MainPath)
    print MainPath  + " deleted: OK"
    sys.exit()
    

def makeConf():
    file = open(MainPath + '/config', 'w')
    file.write("# This is config of GSMT "+ str(libMain.version) + " (c) Filip Dobrovolny 2013")
    file.close()
    print MainPath + '/config created: OK'


def createPath(path):
    try:
        os.mkdir(path)
    except:
        print "Uknown error at creating" + path + " folder. Please report bug."
        print "ERROR: " + str(sys.exc_info())
        sys.exit()
    else:
        print path + " created: OK"

def createStructure():
    createPath(MainPath)
    createPath(MainPath + "/games")
    createPath(MainPath + "/modules")


def checkPlatform():
    if not utils.checkPlatform():
        print "Sorry platform: " + platform.system() + " is not supported yet :("
        print "Do you have supported platform and still showing this message please contact us."
        sys.exit()
    else:
        print "Platform: OK"


def checkRoot():
    if not utils.checkRoot():
        sys.exit("\nOnly root can run this script\n")
    else:
        print "Root: OK"


def checkIfExist():
    try:
        with open(MainPath + '/config/'): pass
    except IOError as e:
        if os.path.exists(MainPath):
            print 'ERROR: GSMT alredy exists.'
            print 'If GSMT not exists, please try to remove ' + MainPath + ' folder.'
            sys.exit()
        else:
            print MainPath + " not exist: OK"
    else:
        print 'ERROR: GSMT alredy exists.'
        print 'If GSMT is not installed, please try remove ' + MainPath + ' folder.'
        print 'In other case, please report bug.'
        sys.exit()


def getSuperuserInfo():
    print "please create GSMT superuser:\n"
    name = raw_input("Name: ")
    
    while True:
        password1 = getpass.getpass()
        if password1 == "q":
            print "Exiting ..."
            print "Create superuser: Failed"
            exit()
            break
        password2 = getpass.getpass("RePassword: ")
        if len(password1) < 5:
            print "Password must be 5 or more characters length!"
        elif password1 == password2:
            break
        else:
            print "Password aren't same please try it again. Or press q to exit."
            
    return name, utils.encryptPass(password1)


def createSQLite():
    try:
        libMain.createSQLite()
    except:
        print "Uknown error at creating sqlite database. Please report bug."
        print "ERROR: " + str(sys.exc_info())
        exit()
    else:
        print "SQLite created: OK"


def registerSuperuser(name, password):
    try:
        libMain.sqlite.create(name, password)
        libMain.sqlite.close()
    except:
        print "Uknown error at creating sqlite database. Please report bug."
        print "ERROR: " + str(sys.exc_info())
        exit()
    else:
        print "Superuser created: OK"



################ Configurate ################
print "Welcome to GMST " + str(libMain.version) + " (c) Filip Dobrovolny 2013"
print "==============================================="

# Platform check
checkPlatform()

# Check if user is root
checkRoot()

# check if main path alredy exists
checkIfExist()

#crate main structure
createStructure()
makeConf()


createSQLite()
superInfo = getSuperuserInfo()
registerSuperuser(superInfo[0], superInfo[1])


print "============================="
print "Finished !"
