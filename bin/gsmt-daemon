#!/usr/bin/python3
# pylint: disable=c0413,c0103
"""GSMT daemon controll script."""
import configargparse
import os
import sys


def suppress_keyboard_interrupt_message():
    """Prevent unsightly KeyboardInterrupt tracebacks.

    Nothing will be printed to the terminal after an uncaught
    :class:`exceptions.KeyboardInterrupt`.
    Inspired by DNF.

    """
    old_excepthook = sys.excepthook

    def new_hook(type_, value, traceback):
        """Create new exceptionhook to ignore KeyboardInterrupt."""
        if type_ != KeyboardInterrupt:
            old_excepthook(type_, value, traceback)
        else:
            pass

    sys.excepthook = new_hook

suppress_keyboard_interrupt_message()
if __name__ != "__main__":
    sys.stderr.write('The executable for GSMT module must not be imported.')
    sys.exit(1)

HERE = sys.path[0]
if HERE != '/usr/bin':
    # add ./GSMT folder to python libs (git checkout)
    GSMT_TOP_LEVEL = os.path.dirname(HERE)
    sys.path[0] = GSMT_TOP_LEVEL

from GSMT.daemon import Daemon  # noqa
from GSMT.data_groups import Adress, SystemUser  # noqa

parser = configargparse.ArgParser(
    default_config_files=['/etc/GSMT/gsmt.ini', './gsmt.ini'],
    prog='gsmt-daemon',
    description='GSMT - Game Server Managment Tool \n Useful tool for '
                'server managment.')
parser.add('-v', '--verbose', action='store_true', default=None,
           help="Log debug messages.")
parser.add('-f', '--foreground', action='store_true', default=None,
           help="Do not fork stay in foregroud.")
parser.add('-c', '--config', is_config_file=True,
           help='path to the config file')
parser.add('-p', '--path', default="/etc/GSMT",
           help="Path to configs directory.")
parser.add('-s', '--servers-path', default="/opt/GSMT",
           help="Path to servers location.")
parser.add('-P', '--port', type=int, default=8000,
           help="Port for GSMT server.")
parser.add('-a', '--adress', default="localhost",
           help="Adress for GSMT server.")
parser.add('-u', '--user', default=None,
           help="User under who to run the daemon.")
parser.add('-g', '--group', default=None,
           help="Group under who to run the daemon.")
args = parser.parse_args()

daemon = Daemon(path=args.path, verbose=args.verbose,
                foreground=args.foreground, servers_path=args.servers_path,
                adress=Adress(args.adress, args.port),
                system_user=SystemUser(args.user, args.group))
daemon.start()
