#!/usr/bin/python

import platform, os, sys, getpass, getopt
# Argument Parsing
try:
    opts, args = getopt.getopt(sys.argv[1:],"hu:p:H:",["help", "user=","password=", "host="])
except getopt.GetoptError:
    print 'Usage: gsmt -u [user] -p [password] -H [host]'
    sys.exit(2)

username = None
password = None
host = "localhost"
for opt, arg in opts:
    if opt in ("-h", "--help"):
        print 'gsmt -u [user] -p [password] -H [host]'
        sys.exit()
    elif opt in ("-u", "--user"):
        username = arg
    elif opt in ("-p", "--password"):
        password = arg
    elif opt in ("-H", "--host"):
        host = arg
        print 'Sorry host function is not avalible yet.'
        sys.exit()

#Import GSMT knihovny
try:
    from GSMT import *
except Exception as e:
    print "Can't load main library!"
    print "ERROR: " + str(e)
    sys.exit()
libMain = GSMT.main()



#functions:

#Exit
def myExit(temp=None):
    print 'Bye.'
    libMain.sqlite.close()
    sys.exit()


def myHelp(temp=None):
    print 'Commadns:'
    print '  * help - show this help'
    print '  * help <command> - display help about <command>'
    print '  * passwd - change password of actual user'
    print '  * passwd <user> - change password of <user>'
    print '  * exit - exit program'


def passwd(temp):
    global encryptedPassword
    if temp == []:
        '''
        actualPassword = getpass.getpass("Password " + str(username) + "@" + str(host) + ": ")
        encryptedActualPassword = utils.encryptPass(actualPassword)
        del(actualPassword)
        if encryptedActualPassword == encryptedPassword:'''
        while True:
            password1 = utils.inputPass("New-Password: ", myExit)
            if password1.lower() == "q":
                break
            if len(password1) >= 5:
                password1 = utils.encryptPass(password1)
                password2 = utils.encryptPass(getpass.getpass("Re-New-Password: "))
                if password1 == password2:
                    if libMain.sqlite.changeUserPass(password1, username):
                        encryptedPassword = password1
                        break
                    else:
                        print "Something went wrong."
                        break
                else:
                    print "Password aren't same! Please try it again. Or press q to exit."
            else:
                print "Password must be at least 5 characters long"



############################# code part #############################
print "Welcome to GSMT " + str(libMain.version) + " (c) Filip Dobrovolny 2013"
print "==============================================="
try:
    with open('/etc/GSMT/config'): pass
except IOError as e:
    if os.path.exists("/etc/GSMT"):
        print 'GSMT does not exists!'
        print 'Please try run gsmt-configure.'
        print ''
        print 'In case gsmt is configured please report bug.'
        print 'Error:'
        print e
        sys.exit()

libMain.initSQLite()
while True:
    if username == None:
        username = utils.input("Username: ", myExit)
    if username.lower() == "q":
        libMain.sqlite.close()
        sys.exit("Bye.")
    if password == None:
        password = utils.inputPass("Password " + str(username) + "@" + str(host) + ": ", myExit)
    encryptedPassword = utils.encryptPass(password)
    if password != "" and user != "" and libMain.sqlite.login(username, encryptedPassword):
        print 'Suceffuly logged-in!'
        del(password)
        break
    else:
        print 'Bad username or password!'
        user = None
        password = None
        print 'Press Q to exit.'


commands = {"help" : myHelp, "exit" : myExit, "passwd" : passwd, }
while True:
    userInput = utils.input(">>>", myExit)
    userInput = userInput.split()
    if userInput[0].lower() not in commands:
        print 'Unknown command!'
        continue
    commands[userInput[0]](userInput[1:])
